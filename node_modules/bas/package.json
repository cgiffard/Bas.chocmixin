{
  "name": "bas",
  "version": "0.0.9",
  "description": "Behaviour Assertion Sheets: CSS-like declarative syntax for required behaviour.",
  "main": "lib/index.js",
  "scripts": {
    "test": "mocha -R spec -t 10000"
  },
  "bin": {
    "bas": "lib/cli.js"
  },
  "repository": "",
  "keywords": [
    "test",
    "css",
    "behaviour",
    "integration",
    "testing",
    "declarative",
    "client-side",
    "crawl",
    "crawler",
    "assertion"
  ],
  "author": {
    "name": "Christopher Giffard",
    "email": "christopher.giffard@cgiffard.com"
  },
  "license": "BSD",
  "devDependencies": {
    "chai": "~1.5.0",
    "mocha": "~1.9.0"
  },
  "dependencies": {
    "commander": "~1.1.1",
    "simplecrawler": "~0.2.2",
    "csstree": "0.0.1",
    "request": "~2.21.0",
    "yoyaku": "0.0.12",
    "cheerio": "~0.11.0",
    "colors": "~0.6.0-1",
    "async": "~0.2.8",
    "text-statistics": "~0.1.1"
  },
  "readme": "# Behaviour Assertion Sheets [![Build Status](https://travis-ci.org/cgiffard/Behaviour-Assertion-Sheets.png?branch=master)](https://travis-ci.org/cgiffard/Behaviour-Assertion-Sheets)\n\n(For a friendlier overview, see http://bas.cgiffard.com/)\n\nBehaviour Assertion Sheets (Bas, pronounced 'base') are a way to describe how a\nweb page fits together, make assertions about its structure and content, and be\nnotified when these expectations are not met. It's a bit like selenium, if you've\never used that. An easier DSL for client-side integration testing.\n\nYou could:\n\n*\tUse BAS to [monitor the Apple Developer site to tell you when WWDC tickets\n\tare on sale](http://github.com/cgiffard/WWDC-Alerts), or your local postal\n\tservice to tell you when a package has been delivered\n*\tScan your site for common accessibility pitfalls, such as missing alt tags\n\ton images, poor heading order, or even check for hard-to-read copy with the\n\tinbuilt readability tests!\n*\tMonitor for service availability and downtime\n*\tIntegration testing and integrity verification (plug Bas into jenkins or travis!)\n*\tUse BAS inside of an existing test framework like Mocha to verify output,\n\tor even as reporting middleware inside your express application\n\nAnybody who has ever used CSS can use Bas - the [syntax is easy and familiar.]\n(#sheet-syntax)\n\n**Warning: This is an alpha-ish release. There might be bugs. Sorry!**\n\n## Installing\n\nThis first implementation of Bas is built with [node.js](http://nodejs.org), so\nyou'll need it and npm first. Then just use npm to install Bas:\n\n\tnpm install -g bas\n\t\nInstalling globally (`-g`) makes a [CLI tool](#bas-on-the-command-line) available\nfor working with Bas sheets. If you don't install globally you can still use Bas\nvia the [node.js API](#bas-nodejs-api).\n\n## Sheet Syntax\n\nAs mentioned earlier, the Bas syntax looks very similar to (and nearly even parses as)\nCSS. Here are the major components:\n\n![Major components of the Bas syntax, as described by the list below.]\n(http://cgiffard.com/github/bas/bas-diagram.png)\n\n(You can work this out yourself and just want to skip to the goods?\n[Jump to syntax example.](#bas-example))\n\n#### Rulesets\n\nRulesets are the highest-level construct in Bas. Everything falls inside a ruleset.\nThere are two kinds of rulesets - page specific rulesets denoted by the tag `@page`,\nand rulesets that execute against every page unconditionally, denoted by the\ntag `@all`.\n\nSyntactically these are based on the 'at-rules' of CSS (such as `@font-face`,\n`@media`, etc.)\n\nRulesets cannot be nested.\n\nAn example rulset:\n\n\t@all {\n\t\t...\n\t}\n\n#### Annotations\n\nAnnotations are an extension of CSS comments, that are prepended with an `@` symbol.\nBas knows to associate these with rulesets and selectors that follow, and displays\nthem in assertion failure traces so you know where they came from!\n\nYou may add as many annotations as you like to a single element. Every annotation\nthat precedes a block, regardless of whether assertions or regular comments (just\nnormal CSS comments without an `@`) are interspersed within them, is associated\nwith that block.\n\nAn example annotation:\n\n\t/*@ Here's my annotation! */\n\n#### Conditions\n\nA condition is appended to a page-specific ruleset (`@page`) and determines based\non the response information, URL of the page, and other environment variables,\nwhether the current page should be evaluated against this ruleset.\n\nConditions are additive and exclusive - each has to be true for the page to be\nconsidered for testing against a given ruleset. You may add as many conditions\nas you like to a `@page` ruleset.\n\nConditions are composed of a parentheses-wrapped set of three elements, each space\nseparated. On the left-hand side, a `test` - a reference to a function which\nreturns an environment variable or extracts an aspect of the current page or\nserver response.\n\nThe middle is an operator, which defines how the comparison takes place. An example\nof an operator might be `=` or `>=` or `!=~`. A full list of operators can be\nfound in the [syntax glossary](#operators).\n\nThe rightmost component is the assertion value - a string, number, or regular\nexpression which is compared to the test according to the rules of the operator.\n\nAn example condition:\n\n\t@page (status-code = 301) { ... }\n\nMultiple conditions may be combined like so:\n\n\t@page (status-code = 301) (content-type != text/html) { ... }\n\t\nRemember that adding more conditions will make the match more *exclusive*, as\nevery single one must succeed for the ruleset to be evaluated.\n\n#### Selector\n\nA selector groups a block of assertions together, and executes them against every\nnode in a page that matches the selector string.\n\nThe selector string is formatted exactly like a regular CSS selector - tags, IDs,\nclasses, pseudoclasses, and attribute syntax are all the same.\n\nThe assertions wrapped within a selector block are only executed should the\nselector match at least one node - with one exception: the special `required`\nassertion [subject](#assertion-subject) which executes regardless of whether a\nselector matches.\n\nThere's a caveat to this too, though: should a selector containing the `required`\nassertion subject be nested inside another selector block which does not match\nany nodes, it will not be executed. This allows syntax like the following:\n\n```css\n\th2 {\n\t\th1 { required: true; }\n\t}\n```\n\nIn this case, the heading 1 is required if one or more second-level headings\nare present.\n\n##### Nesting selectors\n\nSelector blocks can be nested. If a selector block is nested within another, it\nwill only be executed should the parent selector match.\n\n#### Assertions\n\nAn assertion is very similar to a `declaration` in CSS. Fundamentally, it is a\nsemicolon delimited key-value pair, that unlike CSS, defines an expectation\nrather than assigning a value.\n\nThe left-hand side of the assertion is known as the [subject](#assertion-subject)\nof the assertion, and refers to a [test](#tests) - a function that returns a value\nbased on the content of the current page/request.\n\nThis value is then compared against the right-hand side of the assertion - which\ncan contain any number of match requirements, separated by commas and/or spaces.\nThese requirements are evaluated separately, and should any single one of them\nfail (return a falsy value) the assertion will be considered `failed`.\n\nMatch requirements for an assertion can be strings, numbers, regular expressions,\nnegated regular expressions (prepended with !) or [barewords](#barewords).\n\nAn example of an assertion in use:\n\n\tattribute(style): contains(\"font-family\");\n\n#### Assertion Subject\n\nThe left-hand side of every assertion is known as an `assertion subject`, and\nrefers to a test function that returns a value from the current page or response\ninformation. A list of these functions can be found in the [syntax glossary.]\n(#tests)\n\nAn example of an assertion subject in use might be:\n\n\ttitle: /github/i;\n\nIn this case, the assertion subject is `title`. It refers to a test function called\n`title` which extracts the current document title. This is returned for the regex\ncomparison on the right hand side of the assertion.\n\nSome tests take arguments. This is how an assertion with test arguments is\nrepresented:\n\n\tattribute(role): \"main\";\n\n##### Subject Transformations\n\nThe value of an assertion test function can be subsequently transformed by special\nfunctions known as [transform functions](#transform-functions).\n\nThese can be chained against the value of an assertion test using the delimiter `.`.\n\nPurely for illustrative purposes, here's an example of using transform functions\n(fictitious... for now) to rot-13 text from a node before validating the assertion:\n\n\th1 {\n\t\ttext.rot13: /* some match here... */\n\t}\n\nMultiple transforms can be applied:\n\n\th1 {\n\t\ttext.rot13.rot13: /* text is back to normal! */\n\t}\n\t\nAnd arguments can be provided to transform functions, just like to the subject test\nitself.\n\n\th1 {\n\t\ttext.rot(13): /* some match here... */\n\t\ttext.rot(13).rot(13): /* some match here... */\n\t}\n\t\nA more realistic use-case can be found in the text-statistics functions. If you\nwant to check the flesch-kincaid reading ease of a given node, you could use:\n\n\th1 {\n\t\ttext.flesch-kincaid-reading-ease: gte(80);\n\t}\n\nYou could check the reading-ease of the alt-text on an image, too:\n\n\timg {\n\t\tattribute(alt).flesch-kincaid-reading-ease: gte(80);\n\t}\n\n#### Barewords\n\nThe right-hand side of the assertion, as well as regular expression, numeric, and\nstring matches, can contain special keywords known as barewords (for their lack\nof enclosing quotation marks.)\n\nThese keywords refer to a special function that by design has no access to the\ndocument - just the value returned by the [assertion subject](#assertion-subject),\nand any optional arguments it is given.\n\nIf the result of this function is falsy, then the assertion is considered `failed`.\n\nA full list of barewords can be found in the [syntax glossary](#bareword-functions).\n\nAn example of barewords in use:\n\n\tattribute(user-id): exists, longer-than(1), gte(1);\n\n### Bas Example\n\n```css\n\t@page (title =~ /github/i) (domain = github.com) {\n\t\t\n\t\tstatus-code: 200;\n\t\t\n\t\timg[src*=\"akamai\"] {\n\t\t\trequired: true;\n\t\t\tattribute(alt): true;\n\t\t\tcount: 3;\n\t\t}\n\t\t\n\t\t/*@ Require a heading 1 to be present if there's a heading 2 */\n\t\th2 {\n\t\t\th1 {\n\t\t\t\trequired: true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t@all {\n\t\tstatus-code: lt(500);\n\t}\n```\n\nThis example provides a fairly broad look at what Bas can do and how it works.\n\nLet's break this example down bit by bit.\n\nGiven a page from the domain `github.com`, with a document title that matches the\nregular expression `/github/i`:\n\n*\tBas will check that the status code of the page matches the asserted `200 OK`.\n*\tBas will select all images with `akamai` somewhere in the in the `src`\n\tattribute, and:\n\t*\tAssert that at least one appears on the page\n\t*\tAssert that each has an `alt` attribute\n\t*\tAssert that exactly three should appear on the page if the selector matches\n*\tBas will select every heading 2 (h2) on the page\n\t*\tIf there's at least one heading two on the page, Bas will select\n\t\tevery heading 1 (h1), and:\n\t\t\t*\tAssert that if a heading 2 is present, at least one heading 1\n\t\t\t\tshould also be present on the page.\n\nThen, on every page tested, Bas will check to see whether the status code of the\nresponse was less than 500. \n\n## Syntax Glossary\n\n### Operators\n\nOperators are used in ruleset conditions, like `(title !=~ /github/i)`.\n\nA full list follows:\n\n* `=` true if `a == b`\n* `!=` true if `a !== b`\n* `=~` true if the regular expression `a` matches `b`\n* `!=~` true if the regular expression `a` does not match `b`\n* `>` true if `a > b` where both `a` and `b` are considered floats\n* `<` true if `a < b` where both `a` and `b` are considered floats\n* `>=` true if `a >= b` where both `a` and `b` are considered floats\n* `<=` true if `a <= b` where both `a` and `b` are considered floats\n\n### Tests\n\nTests without arguments may be used in ruleset conditions, like\n`(title !=~ /github/i)`, or as assertion subjects with or without arguments, like\n`attribute(role): \"navigation\"`.\n\nTests can also be added programatically. [See the API documentation for details.]\n(#bas-nodejs-api)\n\n*\t**title**\n\tReturns the title of the document.\n*\t**url**\n\tReturns the complete URL used to request the document.\n*\t**domain**\n\tReturns the domain from the URL used to request the document.\n*\t**protocol**\n\tReturns the domain from the URL used to request the document. HTTP if\n\tunspecified.\n*\t**port**\n\tReturns the port from the URL used to request the document. 80 if unspecified.\n*\t**path**\n\tReturns the path from the URL used to request the document. (Includes\n\tquerystring)\n*\t**pathname**\n\tReturns the path name from the URL used to request the document. (Does not\n\tinclude querystring)\n*\t**query** ( [query parameter] )\n\tReturns the entire query string from the URL used to request the document if\n\tthe 'query parameter' attribute is not passed to the test. If the `query\n\tparameter` attribute is present, the individual value for the specified query\n\tparameter will be returned, or null if the parameter does not exist.\n*\t**status-code**\n\tReturns the HTTP response status code the current document was served with.\n*\t**content-length**\n\tReturns the `Content-Length` header with which the current document was served.\n*\t**content-type**\n\tReturns the `Content-Type` header with which the current document was served.\n*\t**header** (header name)\n\tReturns the value of the header specified by the argument.\n*\t**required**\n\tAlways returns true.\n\n#### Tests which must be executed on nodes (placed in selector blocks)\n\n*\t**text**\n\tReturns the text from a given node.\n*\t**attribute** (attribute name)\n\tReturns the value of the specified attribute from a given node.\n*\t**count**\n\tReturns the number of nodes that matched a given selector.\n\t\n#### Transform Functions\n\n*\t**flesch-kincaid-reading-ease**\n\tReturns the readability score (according to the flesch-kincaid reading ease\n\tscale) of the input text.\n*\t**flesch-kincaid-grade-level**\n\tReturns the readability score (according to the flesch-kincaid US grade level\n\tscale) of the input text.\n*\t**gunning-fog-score**\n\tReturns the readability score (according to the gunning-fog scale) of the\n\tinput text.\n*\t**coleman-liau-index**\n\tReturns the readability score (according to the coleman-liau index) of the\n\tinput text.\n*\t**smog-index**\n\tReturns the readability score (according to the SMOG index) of the input text.\n*\t**automated-readability-index**\n\tReturns the readability score (according to the automated readability index)\n\tof the input text.\n*\t**letter-count**\n\tReturns the number of latin letters in the text.\n*\t**sentence-count**\n\tReturns the number of sentences in the text (for latin languages.)\n*\t**word-count**\n\tReturns the number of words in the input text (for latin languages.)\n*\t**average-words-per-sentence**\n\tReturns the average number of words in each sentence in the input text.\n*\t**average-syllables-per-word**\n\tReturns the average number of syllables per word in the input text.\n\n### Bareword Functions\n\nBarewords are used in assertions to evaluate the result of a test. Barewords\ncan have arguments.\n\n*\t**true**\n\tTests whether a test result is truthy.\n*\t**false**\n\tTests whether a test result is falsy.\n*\t**exists**\n\tSynonym for true. (Can make sheets more readable.)\n*\t**required**\n\tSynonym for true. (Can make sheets more readable.)\n*\t**exists**\n\tSynonym for true. (Can make sheets more readable.)\n*\t**forbidden**\n\tSynonym for false. (Can make sheets more readable.)\n*\t**gt** (expectation)\n\tTests whether the test result is numerically greater than the expectation.\n*\t**gte** (expectation)\n\tTests whether the test result is numerically greater or equal than the\n\texpectation.\n*\t**lt** (expectation)\n\tTests whether the test result is numerically less than the expectation.\n*\t**lte** (expectation)\n\tTests whether the test result is numerically less than or equal to the\n\texpectation.\n*\t**ne** (expectation)\n\tTests whether the test result is numerically not equal to the expectation.\n*\t**Length** (expected length)\n\tReturns true if the length of a test result (cast as a string) matches the\n\texpected length.\n*\t**longer-than** (expectation)\n\tTests whether the string length of the test result is greater than the\n\texpectation.\n*\t**shorter-than** (expectation)\n\tTests whether the string length of the test result is less than the\n\texpectation.\n*\t**contains** (expectation)\n\tTests whether the test result as a string contains an exact match for the\n\texpectation.\n\n## Bas on the Command Line\n\nIf you [installed Bas globally](#installing), you'll have access to a `bas` CLI\nclient which (hopefully) is available in your `$PATH`.\n\nThe `bas` CLI client can request a series of URLs, or initiate a crawl using the\nprovided list of URLs as a seed.\n\nIf you want to use Bas in another, non-JS project or in some kind of automated\ncapacity from the shell, you can supply a `-j` option to get test results as raw\nJSON.\n\nHere's a very simple example of how you might use the CLI tool:\n\n\tbas -vc -s mysheet.bas http://www.mywebsite.com/\n\nIn this example, the file `mysheet.bas` would be loaded and, with verbose reporting,\na crawl of mywebsite.com initiated (the `-c` option starts a crawl.) The test\nsuite would be run against every page returned, for as many pages as are present\nand accessible from the given URL. Obviously it may make sense to limit the number\nof pages downloaded: you can do this with the `-l` option:\n\n\tbas -vc -l 10 -s mysheet.bas http://mywebsite.com/\n\t\nIf the `-s` option isn't specified, `bas` will look for the assertion sheet on\n`STDIN`. Therefore, you can cat a file and pipe it to `bas` as well:\n\n\tcat mysheet.bas | bas -v http://mydomain.com/testfile.html\n\nOr, if you haven't piped anything, `bas` will prompt you to enter the sheet\ninformation manually:\n\t\n\t➭  bas -v http://www.regex.info\n\tWaiting for BAS input from STDIN.\n\t@all {\n\t\th1 { required; }\n\t}\n\t^D\n\tThanks, got it.\n\t\n\t<snip>\n\nHere's the full list of options supported by `bas` at this time: (you can also\nget a list of options by typing `bas -h` at the prompt.)\n\n* `-h`, `--help` Output usage information\n* `-V`, `--version` Output the version number\n* `-c`, `--crawl` Crawl from the specified URLs\n* `-s`, `--sheet [filename]` Test using the specified BAS\n* `-l`, `--limit [number]` Limit number of resources to request when crawling\n* `-d`, `--die` Die on first error\n* `-q`, `--quiet` Suppress output (prints final report/json only)\n* `-v`, `--verbose` Verbose output\n* `-j`, `--json` Output list of errors/test results as JSON\n\nThe exit value from the CLI is equivalent to the number of errors that occurred\nwhen the test suite was run. If no errors occurred, of course, the exit value is\nzero.\n\n## Bas Node.js API\n\n### Overview\n\nThe Bas API is extremely straightforward. To get started, simply require it:\n\n```javascript\n\tvar BAS = require(\"bas\");\n```\n\nCreate yourself a new BAS test suite like so:\n\n```javascript\n\tvar testSuite = new BAS();\n```\n\nLoad in a Bas sheet (you can also supply a buffer if you'd prefer.)\n\n```javascript\n\ttestSuite.loadSheet(\"./mysheet.bas\");\n```\n\t\nThen fetch a resource (in this case, we're using [request](http://npm.im/request))\nand run the test suite against it. You'll need to pass in a URL and response object\nas well as the page data.\n\n```javascript\n\trequest(\"http://example.com\",function(err,res,body) {\n\t\tif (err) throw err;\n\t\t\n\t\ttestSuite.run(url,res,data);\n\t});\n```\n\t\nThe test suite runs asynchronously, and [emits events](#events) so you can know\nwhen errors have occurred, assertions have been tested, or that the suite has\ncompleted.\n\nWe can listen to one of these events to be alerted to when the test suite finishes,\nand receive a list of errors (if there were any!)\n\n```javascript\n\ttestSuite.on(\"end\",function() {\n\t\tif (testSuite.errors.length) {\n\t\t\tconsole.log(\"Looks like there were some errors!\");\n\t\t\ttestSuite.errors.forEach(function(err) {\n\t\t\t\tconsole.error(err.message);\n\t\t\t});\n\t\t}\n\t});\n```\n\n### API Reference\n\n#### BAS (constructor)\n\n\tnew BAS( [options] )\n\nReturns a new Bas test suite instance. The optional `options` parameter is an\nobject, with the following possible keys:\n\n*\t`continueOnParseFail` (Defaults to `false`)\nShould Cheerio fail to parse the HTML document, should Bas continue with the\ntest suite, loading in a blank document? Or bail out?\n\nBAS is an instance of node EventEmitter and implements the `on` and `emit` methods,\nnot described here.\n\n#### `BAS.tests` *property*\n\nGetter: Returns an object map of functions corresponding to [tests](#tests.)\n\n#### `BAS.errors` *property*\n\nGetter: returns an array of assertion errors (Error instances) if any were thrown\nduring the previous test run.\n\nEach error has the following (some additional) properties:\n\t\n*\t`message` (string - the error message.)\n*\t`selector` (string - if available, the selector that triggered the current\n\tassertion.)\n*\t`nodePath` (string - a generated, unambiguous CSS selector path to the current node.)\n*\t`url` (string - the url of the page that triggered this assertion.)\n\nThe list of errors may also be cleared with `BAS.errors.clear()`.\n\n#### `BAS.rules` *property*\n\nGetter: An array of ruleset objects. (Better documentation for these coming soon!)\n\n#### `BAS.stats` *property*\n\nGetter: Returns an object containing statistics about past test runs.\n\nThis should be considered **unstable** and undocumented. It is about to change.\n\n#### `BAS.loadSheet` (buffer sheetData | string filePath)\n\nIf given a buffer, this function will not touch the filesystem - it simply parses the\ndata it receives immediately.\n\nIf given a filepath, asynchronously loads the entire file off disk, and parses\nit - adding the processed rules to the test suite object.\n\nThese rules can be accessed via [`BAS.rules`](#basrules-property).\n\nThis function returns an object with promise handlers: `yep` for success, and `nope`\nfor failure. See the [yoyaku](http://github.com/cgiffard/yoyaku) documentation for\nmore information.\n\n#### `BAS.registerTest`(string testName, function test)\n\nRegisters a test in the `BAS.test` object map - and makes it available to Bas\nsheets to use in conditions and assertion subjects.\n\n#### `BAS.run` (string URL, object HTTPResponse, string Data)\n\nInitiates the running of the test suite.\n\nIt is important to give this function the correct URL and response object, or the\ntests may not operate correctly.\n\n`BAS` will emit events during the execution of the tests.\n\nThis function returns an object with promise handlers: `yep` for success, and `nope`\nfor failure. See the [yoyaku](http://github.com/cgiffard/yoyaku) documentation for\nmore information.\n\n### Events\n\n*\t`loadsheet`\n\tEmitted when a new Bas sheet is successfully loaded.\n*\t`testregistered` (name, func)\n\tEmitted when a new test is registered with Bas.\n*\t`start` (url)\n\tEmitted when the test suite commences.\n*\t`parseerror` (error)\n\tEmitted when Cheerio encounters a parse error with the resource.\n*\t`assertion` (assertion, [node])\n\tEmitted when Bas begins testing an assertion. The node parameter is only\n\tsupplied when testing an assertion in a selector group.\n*\t`assertionsuccess` (assertion, [node])\n\tEmitted when Bas completes testing an assertion, and the result is truthy.\n\tThe node parameter is only supplied when testing an assertion in a selector\n\tgroup.\n*\t`assertionfailed` (assertionErr, assertion)\n\tEmitted when Bas completes testing an assertion, and the result is falsy, and\n\tthe test is considered failed. The error triggered by the assertion is supplied\n\tas the first parameter.\n*\t`selector` (selector, node)\n\tEmitted when Bas commences testing the assertions in a selector.\n*\t`startgroup` (rule)\n\tEmitted when Bas commences testing the assertions in a ruleset.\n*\t`end` (url,errors)\n\tEmitted when Bas completes the test suite. An array of errors is provided,\n\tand the URL of the page the tests were executed against.\n\n## Roadmap\n\n#### Next Version/s\n\n*\tBetter documentation for rulesets, assertions, selector objects\n*\tAsynchronous test support\n*\tComprehensive test suite (this is steadily improving!)\n*\tVery solid cleanup\n*\tLoad in HTML/XML to test against from disk using `bas` CLI tool\n*\tLots more test functions (for conditions and assertions)\n*\tSupport for assertion-specific error severity\n\n#### Further down the road\n\n*\tSupport for headless browsers and PhantomJS\n\n#### Under consideration\n\n*\tCross compilation of Bas sheets to selenium\n\n## Testing\n\nBas does not have an enormous test suite at this stage, but I'm working on filling\nit out as comprehensively as possible.\n\nTo run the test suite, use:\n\n\tnpm test\n\n## Licence\n\nCopyright (c) 2012, Christopher Giffard.\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, \nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR \nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
  "readmeFilename": "README.md",
  "_id": "bas@0.0.9",
  "_from": "bas@~0.0.9"
}
